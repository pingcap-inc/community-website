version: 2.1

commands:
  create_concatenated_package_lock:
    description: "Concatenate all package-lock.json files recognized by lerna.js into single file. File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine package-lock.json files to single file
          command: |
            npx lerna list -p -a | awk -F packages '$2!="" {printf "\"packages%s/package-lock.json\" ", $2}' | xargs cat > << parameters.filename >>

  install-deps:
    parameters:
      onlyInstall:
        type: boolean
        default: false

    steps:
      - checkout
      - run: curl -sL https://sentry.io/get-cli/ | bash
      - restore_cache:
          keys:
            - v2-deps-{{ checksum "package-lock.json" }}
            - v2-deps
      - when:
          condition: << parameters.onlyInstall >>
          steps:
            - run: npm install --ignore-scripts
      - unless:
          condition: << parameters.onlyInstall >>
          steps:
            - create_concatenated_package_lock:
                filename: combined-package-lock.txt
            - restore_cache:
                keys:
                  - v2-sub-deps-{{ checksum "combined-package-lock.txt" }}
                  - v2-sub-deps
            - run: |
                npm -v
                npm install
            - save_cache:
                paths:
                  - packages/accounts/node_modules
                  - packages/common/node_modules
                  - packages/datasource/node_modules
                  - packages/i18n/node_modules
                  - packages/mockApi/node_modules
                  - packages/strapi/node_modules
                  - packages/trackingScript/node_modules
                  - packages/ui/node_modules
                  - packages/uiScripts/node_modules
                key: v2-sub-deps-{{ checksum "combined-package-lock.txt" }}
      - save_cache:
          key: v2-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules


  prepare-sentry:
    steps:
      - run:
          name: Prepare Sentry env variables
          command: |
            echo "export SENTRY_RELEASE=${SENTRY_PROJECT}@${CIRCLE_SHA1}" >> $BASH_ENV

  dump-env-vars:
    steps:
      - run: ./env_dump.sh
      - run:
          name: Prepare private env variables
          command: |
            cat .env.local

  verify-and-build:
    steps:
      - run: npm run lint
      - run: npm test
      - run:
          command: npm run build
          no_output_timeout: 5m

  copy-locales:
    steps:
      - run: npm run copy:locales

  deploy-website:
    parameters:
      stage:
        default: "production"
        type: enum
        enum: [ "production", "preview" ]
    steps:
      - when:
          condition:
            equal: [ << parameters.stage >>, "preview" ]
          steps:
            - run: |
                ssh-keyscan "${HOST_PREVIEW_IP}" >> ~/.ssh/known_hosts 2>/dev/null
                INSTANCES_NUM=1 npm run deploy:<< parameters.stage >>
      - when:
          condition:
            equal: [ << parameters.stage >>, "production" ]
          steps:
            - run: |
                ssh-keyscan "${HOST_HK_1_IP}" >> ~/.ssh/known_hosts 2>/dev/null
                INSTANCES_NUM=2 npm run deploy:<< parameters.stage >>

jobs:
  verify:
    docker:
      - image: circleci/node:14.13.0
    steps:
      - install-deps
      - dump-env-vars
      - verify-and-build

  build:
    docker:
      - image: circleci/node:14.13.0
    environment:
      SENTRY_ORG: pingcap
      SENTRY_PROJECT: tug-website
      ENABLE_SENTRY: 'true'
      SENTRY_NO_PROGRESS_BAR: '1'
    steps:
      - install-deps
      - prepare-sentry
      - dump-env-vars
      - verify-and-build
      - copy-locales
      - persist_to_workspace:
          root: .
          paths:
            - .env.local
            - .next
            - public/locales
            - public/scripts

  deploy:
    parameters:
      stage:
        default: "production"
        type: enum
        enum: [ "production", "preview" ]
    docker:
      - image: circleci/node:14.13.0
    steps:
      - install-deps:
          onlyInstall: true
      - attach_workspace:
          at: .
      - deploy-website:
          stage: << parameters.stage >>

workflows:
  commit:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main

      - deploy:
          stage: preview
          requires:
            - build

      - hold-for-production-deploy:
          type: approval
          requires:
            - build

      - deploy:
          stage: production
          requires:
            - hold-for-production-deploy

  preview-commit:
    jobs:
      - verify:
          filters:
            branches:
              ignore:
                - main

      - hold-for-preview-deploy:
          type: approval
          filters:
            branches:
              ignore:
                - main

      - build:
          requires:
            - hold-for-preview-deploy

      - deploy:
          stage: preview
          requires:
            - build